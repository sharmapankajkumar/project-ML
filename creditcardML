import sys
import scipy
import sklearn
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns



# load the dataset using pandas
data = pd.read_csv('creditcard.csv')

print(data.columns)

print(data.shape)

print(data.describe())

data = data.sample(frac = 0.1, random_state = 1)
print (data.shape)

#plot histogram
data.hist(figsize = (20,20))
plt.show()

#determine number of fraud cases
Fraud = data[data['Class'] == 1]
Valid = data[data['Class'] == 0]

outlier_fraction = len(Fraud) / float(len(Valid))
print(outlier_fraction)

print('Fraud cases: {}'.format(len(Fraud)))
print('Valid cases: {}'.format(len(Valid)))


#correletion matrix
corrmat = data.corr()
fig = plt.figure(figsize = (12,9))
sns.heatmap(corrmat, vmax = .8, square = True)
plt.show()


#get all the columns in data frame
columns = data.columns.tolist()

#remove data we dont want
columns = [c for c in columns if c not in["Class"]]

#store the variable we pridict on
target = "Class"
X = data[columns]
Y = data[target]

#print the shape of x y
print(X.shape)
print(Y.shape)


from sklearn.metrics import classification_report, accuracy_score
from sklearn.ensemble import IsolationForest
from sklearn.neighbors import LocalOutlierFactor

#define a random state
state = 1

#define outlier detection methods
classifiers = {
    "Isolation Forest": IsolationForest(max_samples=len(X),
                                       contamination = outlier_fraction,
                                       random_state = state),
   
    "Local Outlier Factor": LocalOutlierFactor(
                                              n_neighbors = 20,
                                              contamination = outlier_fraction)                                 
    
}


#fit the model
n_outliers = len(Fraud)

for i,(clf_name, clf) in enumerate(classifiers.items()):

#fit the data tag outlier

   if clf_name == "Local Outlier Factor":
       y_pred = clf.fit_predict(X)
       scores_pred = clf.negative_outlier_factor_
   else:
       clf.fit(X)
       scores_pred = clf.decision_function(X)
       y_pred = clf.predict(X)
    
    
   #reshape the prediction value valid for 0 and 1 for fraud
   y_pred[y_pred == 1] = 0
   y_pred[y_pred == -1] = 1
    
   n_errors = (y_pred != Y).sum()
    
   #run classificartion matrics
   print('{}: {}'.format(clf_name, n_errors))
   print(accuracy_score(Y, y_pred))
   print(classification_report(Y, y_pred))

